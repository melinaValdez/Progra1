/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectolibrerias;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jose Daniel
 */
public class BuscarLibros extends javax.swing.JFrame {

    //private int i = 0;

    public BuscarLibros() {
        initComponents();
        comboTemas.removeAllItems();
        comboTemas.addItem("Buscar tema");
        comboTemas.addItem("FICCION");
        comboTemas.addItem("INGENIERIA");
        comboTemas.addItem("ADMINISTRACION");
        comboTemas.addItem("CIENCIASNATURALES");
        comboTemas.addItem("ARTES");
        comboTemas.addItem("HISTORIA");
        comboTemas.addItem("MATEMATICA");
        comboTemas.addItem("LITERATURA");
        setLibraries();
    }


    public void meter(Libro libro){
        DefaultTableModel model = (DefaultTableModel)tablaResultados.getModel();
        model.addRow(new Object[]{libro.getNombre(), String.valueOf(libro.getIssn()),libro.getTema(),String.valueOf(libro.getPrecio()),String.valueOf(libro.getCantDisponible()),String.valueOf(libro.cantVendida),libro.getDescripcion()});

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        comboLibrerias = new javax.swing.JComboBox<>();
        comboTemas = new javax.swing.JComboBox<>();
        libroBuscado = new javax.swing.JTextField();
        txtMinimo = new javax.swing.JTextField();
        txtMaximo = new javax.swing.JTextField();
        buscarLibro = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        lblFondo = new javax.swing.JLabel();

        jPanel2.setLayout(null);

        lblTitulo.setFont(new java.awt.Font("Segoe UI Semilight", 0, 36)); // NOI18N
        lblTitulo.setText("Buscar");
        jPanel2.add(lblTitulo);
        lblTitulo.setBounds(290, 0, 110, 70);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        jLabel1.setText("Libro");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(40, 80, 70, 30);

        jLabel2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        jLabel2.setText("Libreria");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(300, 70, 70, 40);

        jLabel3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        jLabel3.setText("Tema");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(560, 70, 70, 40);

        jLabel5.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        jLabel5.setText("Precio Minimo");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(40, 170, 140, 40);

        jLabel6.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        jLabel6.setText("Precio Maximo");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(40, 250, 180, 60);

        comboLibrerias.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        comboLibrerias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(comboLibrerias);
        comboLibrerias.setBounds(270, 120, 180, 50);

        comboTemas.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        comboTemas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(comboTemas);
        comboTemas.setBounds(510, 120, 180, 50);

        libroBuscado.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        libroBuscado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libroBuscadoActionPerformed(evt);
            }
        });
        jPanel2.add(libroBuscado);
        libroBuscado.setBounds(40, 120, 210, 50);

        txtMinimo.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        txtMinimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinimoActionPerformed(evt);
            }
        });
        jPanel2.add(txtMinimo);
        txtMinimo.setBounds(40, 210, 140, 40);

        txtMaximo.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        txtMaximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaximoActionPerformed(evt);
            }
        });
        jPanel2.add(txtMaximo);
        txtMaximo.setBounds(40, 310, 140, 40);

        buscarLibro.setFont(new java.awt.Font("Segoe UI Semilight", 0, 20)); // NOI18N
        buscarLibro.setText("Buscar");
        buscarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarLibroActionPerformed(evt);
            }
        });
        jPanel2.add(buscarLibro);
        buscarLibro.setBounds(40, 460, 140, 50);

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Issn", "Tema", "Precio", "Disponibles", "Vendidos", "Descripcion"
            }
        ));
        jScrollPane1.setViewportView(tablaResultados);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(200, 200, 630, 320);

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/background.jpg"))); // NOI18N
        jPanel2.add(lblFondo);
        lblFondo.setBounds(0, 0, 840, 540);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void libroBuscadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libroBuscadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_libroBuscadoActionPerformed

    private void buscarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarLibroActionPerformed
        // TODO add your handling code here:

        String libroElegido = libroBuscado.getText();
        String temaElegido = comboTemas.getSelectedItem().toString();
        String libreriaElegida = comboLibrerias.getSelectedItem().toString();
        String precioMinimo = txtMinimo.getText();
        String precioMaximo = txtMaximo.getText();
        ListaSimple listaLibs = ListaSimple.getLibrariesInstance();
        ListaDoble listaBuscados = new ListaDoble();

        if (libroBuscado.getText().isEmpty() && txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema") && libreriaElegida.equals("Buscar Libreria")) {
            JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            //Buscador con el nombre del libro
        } else if (txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema") && libreriaElegida.equals("Buscar Libreria")) {
            if (!libroBuscado.getText().isEmpty()) {
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText())) {
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
          //Buscador con el nombre de la libreria  
        } else if(libroBuscado.getText().isEmpty() && txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema")){
            if(!libreriaElegida.equals("Buscar Libreria")){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {//For que recorre cada nodo de la lista de librerias
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    if(libreria.equals(libreriaElegida)){//Compara si el nombre de la libreria es el mismo de la deseada
                        for(int k=0; k <= temporal.getListaLibros().getSize()-1; k++){//For que recorre los nodos de la lista libros
                            Libro temporalLb =(Libro) temporal.getListaLibros().goToPos(k);//Selecciona a un nodo segun el numero del contador
                            meter(temporalLb);
                        }
                    }
                } 
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
          //Buscador con el nombre del tema
        }else if(libroBuscado.getText().isEmpty() && txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty() && libreriaElegida.equals("Buscar Libreria")){
            if(!temaElegido.equals("Buscar tema")){
                 for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getTema();
                        if (libroVisto.equalsIgnoreCase(temaElegido)) {
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador con el precio minimo   
        }else if (libroBuscado.getText().isEmpty() && txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema") && libreriaElegida.equals("Buscar Libreria")) {
            if (!txtMinimo.getText().isEmpty()) {
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        //String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMinimo);
                        if (cambio <= precioVisto) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador con el precio maximo
        }else if (libroBuscado.getText().isEmpty() && txtMinimo.getText().isEmpty() && temaElegido.equals("Buscar tema") && libreriaElegida.equals("Buscar Libreria")) {
            if (!txtMaximo.getText().isEmpty()) {
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        //String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMaximo);
                        if (precioVisto <= cambio) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador libro y libreria
        }else if(txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema")){
            if(!libroBuscado.getText().isEmpty() && !libreriaElegida.equals("Buscar Libreria")){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    System.out.println(libreria);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText()) && libreria.equalsIgnoreCase(libreriaElegida)) {
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador libro y tema
        }else if(txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty() && libreriaElegida.equals("Buscar Libreria")){
            if(!libroBuscado.getText().isEmpty()&& !temaElegido.equals("Buscar tema")){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        String temaVisto = temporalLb.getTema();    
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText()) && temaVisto.equalsIgnoreCase(temaElegido)) {
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador libro y precio minimo
        }else if(txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema") && libreriaElegida.equals("Buscar Libreria")){
            if(!libroBuscado.getText().isEmpty() && !txtMinimo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMinimo);
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText()) && cambio <= precioVisto) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador de libro y precio maximo
        }else if(txtMinimo.getText().isEmpty() && temaElegido.equals("Buscar tema") && libreriaElegida.equals("Buscar Libreria")){
            if(!libroBuscado.getText().isEmpty() && !txtMaximo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMaximo);
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText()) && cambio <= precioVisto) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador de libreria y tema
        }else if(libroBuscado.getText().isEmpty() && txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty()){
            if(!libreriaElegida.equals("Buscar Libreria") && !temaElegido.equals("Buscar tema")){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    System.out.println(libreria);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getTema();
                        if (libroVisto.equalsIgnoreCase(temaElegido) && libreria.equalsIgnoreCase(libreriaElegida)) {
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }     
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Libreria y minimo
        }else if(libroBuscado.getText().isEmpty() && txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema")){
            if(!libreriaElegida.equals("Buscar Libreria") && !txtMinimo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    System.out.println(libreria);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        //String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMinimo);
                        if (libreria.equalsIgnoreCase(libreriaElegida) && cambio <= precioVisto) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Libreria y maximo
        }else if(libroBuscado.getText().isEmpty() && txtMinimo.getText().isEmpty() && temaElegido.equals("Buscar tema")){
            if(!libreriaElegida.equals("Buscar Libreria") && !txtMaximo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    System.out.println(libreria);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        //String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMaximo);
                        if (libreria.equalsIgnoreCase(libreriaElegida) && precioVisto <= cambio) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Tema y minimo   
        }else if(libroBuscado.getText().isEmpty() && txtMaximo.getText().isEmpty() && libreriaElegida.equals("Buscar Libreria")){
            if(!temaElegido.equals("Buscar tema") && !txtMinimo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getTema();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMinimo);
                        if (cambio <= precioVisto && libroVisto.equalsIgnoreCase(temaElegido)) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Tema y maximo
        }else if(libroBuscado.getText().isEmpty() && txtMinimo.getText().isEmpty() && libreriaElegida.equals("Buscar Libreria")){
            if(!temaElegido.equals("Buscar tema") && !txtMaximo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getTema();
                        int precioVisto = temporalLb.getPrecio();
                        int cambio = Integer.parseInt(precioMaximo);
                        if (precioVisto <= cambio && libroVisto.equalsIgnoreCase(temaElegido)) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Minimo y maximo
        }else if(libroBuscado.getText().isEmpty() && temaElegido.equals("Buscar tema") && libreriaElegida.equals("Buscar Libreria")){
            if(!txtMinimo.getText().isEmpty() && !txtMaximo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        //String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambioMaximo = Integer.parseInt(precioMaximo);
                        int cambioMinimo = Integer.parseInt(precioMinimo);
                        if (cambioMinimo <= precioVisto && precioVisto <= cambioMaximo) {
                            System.out.println(precioVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Libro, libreria y tema
        }else if(txtMinimo.getText().isEmpty() && txtMaximo.getText().isEmpty()){
            if(!libroBuscado.getText().isEmpty() && !libreriaElegida.equals("Buscar Libreria") &&  !temaElegido.equals("Buscar tema")){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    System.out.println(libreria);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        String temaVisto = temporalLb.getTema();
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText()) && libreria.equalsIgnoreCase(libreriaElegida) && temaVisto.equalsIgnoreCase(temaElegido)){
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }                
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         // Bucador Libro, libreria y minimo
        }else if(txtMaximo.getText().isEmpty() && temaElegido.equals("Buscar tema")){
            if(!libroBuscado.getText().isEmpty() && !libreriaElegida.equals("Buscar Libreria") && !txtMinimo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    System.out.println(libreria);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        //int cambioMaximo = Integer.parseInt(precioMaximo);
                        int cambioMinimo = Integer.parseInt(precioMinimo);
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText()) && libreria.equalsIgnoreCase(libreriaElegida) && cambioMinimo <= precioVisto) {
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador libro, libreria y maximo
        }else if(txtMinimo.getText().isEmpty() && temaElegido.equals("Buscar tema")){
            if(!libroBuscado.getText().isEmpty() && !libreriaElegida.equals("Buscar Libreria") && !txtMaximo.getText().isEmpty()){
                for (int i = 0; i <= listaLibs.getSize() - 1; i++) {
                    Libreria temporal = (Libreria) listaLibs.goToPos(i);
                    String libreria = temporal.getNombre();
                    System.out.println(libreria);
                    int contadorListaLb = temporal.getListaLibros().getSize();
                    for (int k = 0; k <= temporal.getListaLibros().getSize() - 1; k++) {
                        Libro temporalLb = (Libro) temporal.getListaLibros().goToPos(k);
                        String libroVisto = temporalLb.getNombre();
                        int precioVisto = temporalLb.getPrecio();
                        int cambioMaximo = Integer.parseInt(precioMaximo);
                        //int cambioMinimo = Integer.parseInt(precioMinimo);
                        if (libroVisto.equalsIgnoreCase(libroBuscado.getText()) && libreria.equalsIgnoreCase(libreriaElegida) && precioVisto <= cambioMaximo) {
                            System.out.println(libroVisto);
                            System.out.println("temporal libro" + temporalLb.toString());
                            meter(temporalLb);
                            //this.i++;
                        }
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Por favor indique una de las opciones a elegir");
            }
         //Buscador libro, tema y minimo   
        }    
    }//GEN-LAST:event_buscarLibroActionPerformed

    private void txtMinimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinimoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinimoActionPerformed

    private void txtMaximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaximoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaximoActionPerformed

    private void setLibraries() {
        comboLibrerias.removeAllItems();
        comboLibrerias.addItem("Buscar Libreria");
        JPanel panel = new JPanel();
        ListaSimple listaLibs = ListaSimple.getLibrariesInstance();
        if (listaLibs.getSize() == 0) {
            JOptionPane.showMessageDialog(panel, "Actualmente no hay librerías disponibles.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int indice = 0;
            while (indice < listaLibs.getSize()) {
                Libreria temporal = (Libreria) listaLibs.goToPos(indice);
                comboLibrerias.addItem(temporal.getNombre().toUpperCase());
                indice++;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarLibro;
    private javax.swing.JComboBox<String> comboLibrerias;
    private javax.swing.JComboBox<String> comboTemas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField libroBuscado;
    private javax.swing.JTable tablaResultados;
    private javax.swing.JTextField txtMaximo;
    private javax.swing.JTextField txtMinimo;
    // End of variables declaration//GEN-END:variables
}
